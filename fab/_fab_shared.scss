/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

@use 'sass:list';
@use 'sass:map';
@use '../focusring/focus_ring_outward';
@use '../elevation/elevation';
@use '../internal/shape';
@use '../internal/theme';
@use '../ripple/ripple';
@use '../internal/map-ext';

// Supported tokens shared in all fabs.
$supported-tokens: (
  'container-color',
  'container-elevation',
  'container-height',
  'container-shadow-color',
  'container-shape',
  'container-surface-tint-layer-color',
  'focus-container-elevation',
  'hover-container-elevation',
  'hover-state-layer-color',
  'hover-state-layer-opacity',
  'icon-size',
  'lowered-container-elevation',
  'lowered-focus-container-elevation',
  'lowered-hover-container-elevation',
  'lowered-pressed-container-elevation',
  'pressed-container-elevation',
  'pressed-state-layer-color',
  'pressed-state-layer-opacity'
);

$icon-duration: 180ms;
$icon-delay: 90ms;

/// @throw Error if $token is not included in $supported-tokens list.
@function _token($map, $token) {
  @if not
    list.index($supported-tokens, $token) and not
    shape.is-logical-border-property($token)
  {
    @error '"#{$token}" is not a supported token for "FAB".';
  }
  @return map-ext.get($map, $token);
}

/// Emits CSS custom properties for given theme map.
/// To be called after theme.create() is called on the input $theme.
@mixin abstract-theme($theme) {
  @each $token in map.keys($theme) {
    @if not list.index($supported-tokens, $token) {
      @error '"#{$token}" is not a supported token for "FAB" ' +
             '(see $supported-tokens).';
    }
  }
  @include theme.emit($theme);
}

/// Emits CSS selectors with property/value pairs for all fabs.
@mixin abstract-styles($theme) {
  @each $token in map.keys($theme) {
    @if not list.index($supported-tokens, $token) {
      @error '"#{$token}" is not a supported token for "FAB" ' +
             '(see $supported-tokens).';
    }
  }

  &-fab {
    display: inline-flex;
    position: relative;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    border: none;
    text-decoration: none;
    cursor: pointer;
    user-select: none;
    transition:
      box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1),
      opacity 15ms linear 30ms,
      transform $icon-duration + $icon-delay 0ms cubic-bezier(0, 0, 0.2, 1);
    &[hidden] {
      display: none;
    }

    background-color: _token($theme, 'container-color');
    height: _token($theme, 'container-height');

    $theme: shape.merge-logical-border-radius($theme, 'container-shape');
    border-start-start-radius: _token($theme, 'container-shape-start-start');
    border-start-end-radius: _token($theme, 'container-shape-start-end');
    border-end-end-radius: _token($theme, 'container-shape-end-end');
    border-end-start-radius: _token($theme, 'container-shape-end-start');

    @include elevation.theme(
      (
        'level': _token($theme, 'container-elevation'),
        'shadow-color': _token($theme, 'container-shadow-color'),
        'surface-tint-layer-color':
          _token($theme, 'container-surface-tint-layer-color'),
      )
    );
    @include ripple.theme(
      (
        'shape': _token($theme, 'container-shape'),
        'hover-color': _token($theme, 'hover-state-layer-color'),
        'hover-opacity': _token($theme, 'hover-state-layer-opacity'),
        'pressed-color': _token($theme, 'pressed-state-layer-color'),
        'pressed-opacity': _token($theme, 'pressed-state-layer-opacity'),
      )
    );
    @include focus_ring_outward.theme(
      (
        'target-shape': _token($theme, 'container-shape'),
      )
    );
  }

  &-fab:hover {
    @include elevation.theme(
      (
        'level': _token($theme, 'hover-container-elevation'),
      )
    );
  }
  &-fab:focus {
    @include elevation.theme(
      (
        'level': _token($theme, 'focus-container-elevation'),
      )
    );
  }
  &-fab:active {
    @include elevation.theme(
      (
        'level': _token($theme, 'pressed-container-elevation'),
      )
    );
  }
  &-fab:focus-visible {
    @include focus_ring_outward.theme(
      (
        'display': block,
      )
    );
  }

  // Transparent border for HCM.
  &-fab::before {
    position: absolute;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    top: 0;
    /*rtl:ignore*/
    left: 0;
    border: 1px solid transparent;
    border-radius: inherit;
    content: '';
    pointer-events: none;
  }

  &-fab__icon,
  &-fab__icon :is(i, span, img) {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: transform $icon-duration $icon-delay cubic-bezier(0, 0, 0.2, 1);
    will-change: transform;

    width: _token($theme, 'icon-size');
    height: _token($theme, 'icon-size');
    font-size: _token($theme, 'icon-size');
  }

  [dir='rtl'] &-fab__icon--flip-rtl {
    /*rtl:ignore*/
    transform: scaleX(-1);
  }
}
