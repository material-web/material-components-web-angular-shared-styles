/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'third_party/javascript/material/m3/sass/internal/theme';

/// The list of supported themeable tokens for this component variant.
$supported-tokens: (
  // go/keep-sorted start
  'level',
  'shadow-color',
  'surface-tint-layer-color',
  // go/keep-sorted end
);

/// Returns value in $map associated with $key. Throws an error for any $key
/// not present in $supported-tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @param {String} $key - The key in the map.
/// @return {Any} Returns the value from the map if it exists.
/// @throw Error if the $key is not included in the $supported-tokens list.
@function _token($map, $key) {
  @if not list.index($supported-tokens, $key) {
    @error 'Token "#{$key}" is not a supported token for component "elevation". Consider adding it to $supported-tokens.';
  }
  @return map.get($map, $key);
}

// TODO(b/261602454): remove once tokens are updated to use level instead of dp.
@function dp-to-level($dp) {
  $valid-dps: (0, 1, 3, 6, 8, 12);
  @if list.index($valid-dps, $dp) == null {
    @error '#{$dp} must be expressed in dp values (#{$valid-dps}), but received #{$dp}. See b/261603279.';
  }
  @return list.index($valid-dps, $dp) - 1;
}

/// Emits CSS custom properties for the given input map.
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to emit.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin theme($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "elevation" (see $supported-tokens).';
    }
  }

  $theme: theme.create($theme, 'gm3-elevation');
  @include theme.emit($theme);
}

/// Emits CSS selectors with property/value pairs for the given input map.
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to use for CSS values.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin styles($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "elevation" (see $supported-tokens).';
    }
  }

  $theme: theme.create($theme, 'gm3-elevation');
  &-elevation,
  &-elevation__overlay,
  &-elevation:before,
  &-elevation:after {
    border-radius: inherit;
    inset: 0;
    position: absolute;
    pointer-events: none;
  }

  &-elevation__overlay {
    transition: 75ms opacity linear;
    background-color: _token($theme, 'surface-tint-layer-color');

    // Surface tint opacities:
    // level0: opacity: 0;
    // level1: opacity: 0.05;
    // level2: opacity: 0.08;
    // level3: opacity: 0.11;
    // level4: opacity: 0.12;
    // level5: opacity: 0.14;

    // Add a clamped value for each level to build the correct values.
    // Sass will simplify nested calc()s.

    $level: _token($theme, 'level');

    // 0 + 0 = 0
    // $level0-opacity: 0; // +0 is a no-op
    // 0 + 0.05 = 0.05
    $level1-opacity: clamp(0, $level, 0.05);
    // 0.05 + 0.03 = 0.08
    $level2-opacity: clamp(0, $level - 1, 0.03);
    // 0.08 + 0.03 = 0.11
    $level3-opacity: clamp(0, $level - 2, 0.03);
    // (can't simplify levels 2-3 since the value is < 1)
    // 0.11 + 0.01 = 0.12
    $level4-opacity: clamp(0, $level - 3, 0.01);
    // 0.12 + 0.02 = 0.14
    $level5-opacity: clamp(0, $level - 4, 0.02);
    opacity: calc(
      $level1-opacity + $level2-opacity + $level3-opacity + $level4-opacity +
        $level5-opacity
    );
  }

  &-elevation:before,
  &-elevation:after {
    transition: 75ms box-shadow linear;
    content: '';
  }

  // Key (umbra)
  &-elevation:before {
    // level0: box-shadow: 0px 0px 0px 0px;
    // level1: box-shadow: 0px 1px 2px 0px;
    // level2: box-shadow: 0px 1px 2px 0px;
    // level3: box-shadow: 0px 1px 3px 0px;
    // level4: box-shadow: 0px 2px 3px 0px;
    // level5: box-shadow: 0px 4px 4px 0px;

    // Add a clamped value for each level to build the correct values.
    // Sass will simplify nested calc()s.

    $level: _token($theme, 'level');
    $shadow-color: _token($theme, 'shadow-color');

    // 0 + 0 = 0
    // $level0-y: 0; // +0 is a no-op
    // 0 + 1 = 1
    $level1-y: clamp(0, $level, 1);
    // 1 + 0 = 1
    // $level2-y: 0; // +0 is a no-op
    // 1 + 0 = 1
    // $level3-y: 0; // +0 is a no-op
    // 1 + 1 = 2
    $level4-y: clamp(0, $level - 3, 1);
    // 2 + 2 = 4
    $level5-y: calc(2 * clamp(0, $level - 4, 1));
    // Convert to px.
    $y: calc(1px * ($level1-y + $level4-y + $level5-y));

    // 0 + 0 = 0
    // $level0-blur: 0; // +0 is a no-op
    // 0 + 2 = 2
    $level1-blur: calc(2 * clamp(0, $level, 1));
    // 2 + 0 = 2
    // $level2-blur: 0; // +0 is a no-op
    // 2 + 1 = 3
    $level3-blur: clamp(0, $level - 2, 1);
    // 3 + 0 = 3
    // $level4-blur: 0; // +0 is a no-op
    // 3 + 1 = 4
    $level5-blur: clamp(0, $level - 4, 1);
    // Convert to px.
    $blur: calc(1px * ($level1-blur + $level3-blur + $level5-blur));

    box-shadow: 0px $y $blur 0px $shadow-color;
    // Force the opacity to 0 when the level is 0.
    // Otherwise, use the regular opacity.
    // 0.3 * clamp(0, 0, 1) == 0.3 * 0 == 0
    // 0.3 * clamp(0, 2, 1) == 0.3 * 1 == 0.3
    opacity: calc(0.3 * clamp(0, $level, 1));
  }

  // Ambient (penumba)
  &-elevation:after {
    // level0: box-shadow: 0px 0px 0px 0px;
    // level1: box-shadow: 0px 1px 3px 1px;
    // level2: box-shadow: 0px 2px 6px 2px;
    // level3: box-shadow: 0px 4px 8px 3px;
    // level4: box-shadow: 0px 6px 10px 4px;
    // level5: box-shadow: 0px 8px 12px 6px;

    // Add a clamped value for each level to build the correct values.
    // Sass will simplify nested calc()s.

    $level: _token($theme, 'level');
    $shadow-color: _token($theme, 'shadow-color');

    // 0 + 0 = 0
    // $level0-y: 0; // +0 is a no-op
    // 0 + 1 = 1
    $level1-y: clamp(0, $level, 1);
    // 1 + 1 = 2
    $level2-y: clamp(0, $level - 1, 1);
    // 2 + 2 = 4
    // $level3-y: 2 * clamp(0, $level - 2, 1);
    // 4 + 2 = 6
    // $level4-y: 2 * clamp(0, $level - 3, 1);
    // 6 + 2 = 8
    // $level5-y: 2 * clamp(0, $level - 4, 1);
    // Levels 3-5 can be simplified by changing the max clamp value.
    $level3to5-y: calc(2 * clamp(0, $level - 2, 3));
    // Convert to px.
    $y: calc(1px * ($level1-y + $level2-y + $level3to5-y));

    // 0 + 0 = 0
    // $level0-blur: 0; // +0 is a no-op
    // 0 + 3 = 3
    // $level1-blur: 3 * clamp(0, $level, 1);
    // 3 + 3 = 6
    // $level2-blur: 3 * clamp(0, $level - 1, 1);
    // Levels 1-2 can be simplified by changing the max clamp value.
    $level1to2-blur: calc(3 * clamp(0, $level, 2));
    // 6 + 2 = 8
    // $level3-blur: 2 * clamp(0, $level - 2, 1);
    // 8 + 2 = 10
    // $level4-blur: 2 * clamp(0, $level - 3, 1);
    // 10 + 2 = 12
    // $level5-blur: 2 * clamp(0, $level - 4, 1);
    // Levels 3-5 can be simplified by changing the max clamp value.
    $level3to5-blur: calc(2 * clamp(0, $level - 2, 3));
    // Convert to px.
    $blur: calc(1px * ($level1to2-blur + $level3to5-blur));

    // 0 + 0 = 0
    // $level0-spread: 0; // +0 is a no-op
    // 0 + 1 = 1
    // $level1-spread: clamp(0, $level, 1);
    // 1 + 1 = 2
    // $level2-spread: clamp(0, $level - 1, 1);
    // 2 + 1 = 3
    // $level3-spread: clamp(0, $level - 2, 1);
    // 3 + 1 = 4
    // $level4-spread: clamp(0, $level - 3, 1);
    // 4 + 2 = 6
    // Levels 1-4 can be simplified by changing the max clamp value
    $level1to4-spread: clamp(0, $level, 4);
    $level5-spread: calc(2 * clamp(0, $level - 4, 1));
    // Convert to px.
    $spread: calc(1px * ($level1to4-spread + $level5-spread));

    box-shadow: 0px $y $blur $spread $shadow-color;
    // Force the opacity to 0 when the level is 0.
    // Otherwise, use the regular opacity.
    // 0.15 * clamp(0, 0, 1) == 0.15 * 0 == 0
    // 0.15 * clamp(0, 2, 1) == 0.15 * 1 == 0.15
    opacity: calc(0.15 * clamp(0, $level, 1));
  }

  @media screen and (forced-colors: active) {
    &-elevation {
      display: none;
    }
  }
}
