/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

@use 'sass:list';
@use 'sass:map';
@use 'third_party/javascript/material/m3/sass/internal/colors';
@use 'third_party/javascript/material/m3/sass/internal/theme';
@use 'third_party/javascript/material/m3/sass/elevation/elevation';

/// The list of supported themeable tokens for this component variant.
$supported-tokens: (
  // go/keep-sorted start
  'container-color',
  'container-elevation',
  'container-shadow-color',
  'disabled-container-color',
  'disabled-container-elevation',
  'disabled-container-opacity',
  'focus-container-elevation',
  'hover-container-elevation',
  'pressed-container-elevation',
  // go/keep-sorted end
);

/// Returns value in $map associated with $key. Throws an error for any $key
/// not present in $supported-tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @param {String} $key - The key in the map.
/// @return {Any} Returns the value from the map if it exists.
/// @throw Error if the $key is not included in the $supported-tokens list.
@function _token($map, $key) {
  @if not list.index($supported-tokens, $key) {
    @error 'Token "#{$key}" is not a supported token for component "button_filled". Consider adding it to $supported-tokens.';
  }
  @return map.get($map, $key);
}

/// Returns a copy of the map only containing the supported tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @return {Map} Returns the map only with supported tokens.
@function pick($map) {
  $result: ();
  @each $key, $val in $map {
    @if list.index($supported-tokens, $key) {
      $result: map.set($result, $key, map.get($map, $key));
    }
  }
  @return $result;
}

/// Resolve tokens, transforming input into expected output.
@function resolve-tokens($map) {
  // Elevation
  $elevation-tokens: (
    'container-elevation',
    'disabled-container-elevation',
    'hover-container-elevation',
    'focus-container-elevation',
    'pressed-container-elevation'
  );
  @each $token in $elevation-tokens {
    // Convert to level.
    $level: elevation.dp-to-level(_token($map, $token));
    // Replace value in map.
    $map: map.set($map, $token, $level);
  }
  // Colors
  @return colors.join-color-and-opacity-pairs(
    $map,
    (
      color-key: 'disabled-container-color',
      opacity-key: 'disabled-container-opacity',
    )
  );
}

/// Emits CSS custom properties for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to emit.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-theme($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "button_filled" (see $supported-tokens).';
    }
  }

  @include theme.emit($theme);
}

/// Emits CSS selectors with property/value pairs for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see {theme.create}
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to use for CSS values.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-styles($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "button_filled" (see $supported-tokens).';
    }
  }

  &-button {
    // TODO(b/281909437): Remove from each button variant.
    will-change: transform, opacity;
    background-color: _token($theme, 'container-color');
    @include elevation.theme(
      (
        'level': _token($theme, 'container-elevation'),
        'shadow-color': _token($theme, 'container-shadow-color'),
      )
    );
  }
  &-button:hover {
    @include elevation.theme(
      (
        'level': _token($theme, 'hover-container-elevation'),
      )
    );
  }
  &-button:focus-visible {
    @include elevation.theme(
      (
        'level': _token($theme, 'focus-container-elevation'),
      )
    );
  }
  &-button:active {
    @include elevation.theme(
      (
        'level': _token($theme, 'pressed-container-elevation'),
      )
    );
  }
  &-button:disabled {
    background-color: _token($theme, 'disabled-container-color');
    @include elevation.theme(
      (
        'level': _token($theme, 'disabled-container-elevation'),
      )
    );
  }

  &-button:before {
    content: '';
    pointer-events: none;
    position: absolute;
    inset: 0;
    border-radius: inherit;
    border: 1px solid transparent;
    // TODO(b/282060456): Remove from each button variant.
    @media screen and (forced-colors: active) {
      border-color: CanvasText;
    }
  }

  &-button--icon-leading {
    padding-inline-start: 16px;
  }
  &-button--icon-leading &-button__icon-slot :is(i, img, svg) {
    margin-inline-end: 8px;
  }

  &-button--icon-trailing {
    padding-inline-end: 16px;
  }
  &-button--icon-trailing &-button__icon-slot :is(i, img, svg) {
    margin-inline-start: 8px;
  }
}
