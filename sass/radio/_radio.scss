/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

// stylelint-disable selector-class-pattern --
// Selector '.mdc-*' should only be used in this project.

@use 'sass:list';
@use 'sass:map';
@use 'third_party/javascript/material/m3/sass/focusring/focus_ring_outward';
@use 'third_party/javascript/material/m3/sass/ripple/ripple';
@use 'third_party/javascript/material/m3/sass/internal/theme';
@use 'third_party/javascript/material/m3/sass/internal/colors';

/// The list of supported themeable tokens for this component.
$supported-tokens: (
  // go/keep-sorted start
  'disabled-selected-icon-color',
  'disabled-selected-icon-opacity',
  'disabled-unselected-icon-color',
  'disabled-unselected-icon-opacity',
  'focus-ring-color',
  'focus-ring-offset',
  'icon-size',
  'selected-focus-icon-color',
  'selected-hover-icon-color',
  'selected-hover-state-layer-color',
  'selected-hover-state-layer-opacity',
  'selected-icon-color',
  'selected-pressed-icon-color',
  'selected-pressed-state-layer-color',
  'selected-pressed-state-layer-opacity',
  'state-layer-size',
  'unselected-focus-icon-color',
  'unselected-hover-icon-color',
  'unselected-hover-state-layer-color',
  'unselected-hover-state-layer-opacity',
  'unselected-icon-color',
  'unselected-pressed-icon-color',
  'unselected-pressed-state-layer-color',
  'unselected-pressed-state-layer-opacity',
  // go/keep-sorted end
);

/// Returns value in $map associated with $key. Throws an error for any $key
/// not present in $supported-tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @param {String} $key - The key in the map.
/// @return {Any} Returns the value from the map if it exists.
/// @throw Error if the $key is not included in the $supported-tokens list.
@function _token($map, $key) {
  @if not list.index($supported-tokens, $key) {
    @error 'Token "#{$key}" is not a supported token for component "radio". Consider adding it to $supported-tokens.';
  }
  @return map.get($map, $key);
}

/// Returns a copy of the map only containing the supported tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @return {Map} Returns the map only with supported tokens.
@function pick($map) {
  $result: ();
  @each $key, $val in $map {
    @if list.index($supported-tokens, $key) {
      $result: map.set($result, $key, map.get($map, $key));
    }
  }
  @return $result;
}

/// Adds token values that Checkbox theme API supports, but is not reflected
/// in Carbon. We do this in order to maintain a consistent API across token
/// versions.
/// @param {Map} $theme - The input map.
/// @param {Map} $sys-color - System color palette.
/// @return {Map} Returns the map with additional tokens.
@function add-tokens-outside-carbon($theme, $sys-color) {
  @return map.merge(
    $theme,
    (
      'focus-ring-color': map.get($sys-color, 'secondary'),
      'focus-ring-offset': 2px,
    )
  );
}

/// Emits CSS custom properties for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to emit.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-theme($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "radio" (see $supported-tokens).';
    }
  }

  @include theme.emit($theme);
}

/// Emits CSS selectors with property/value pairs for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see {theme.create}
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to use for CSS values.
/// @param {Map} $form-field-override-values - Temporary map of form field values based on tokens.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-styles($theme, $form-field-override-values) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "radio" (see $supported-tokens).';
    }
  }

  $size: _token($theme, 'state-layer-size');
  $icon-size: _token($theme, 'icon-size');

  &-radio {
    display: inline-block;
    position: relative;
    flex: 0 0 auto;
    box-sizing: content-box;
    width: $icon-size;
    height: $icon-size;
    cursor: pointer;
    padding: calc(($size - $icon-size) / 2);

    @include ripple.theme(
      (
        'hover-color': _token($theme, 'unselected-hover-state-layer-color'),
        'hover-opacity': _token($theme, 'unselected-hover-state-layer-opacity'),
        'pressed-color': _token($theme, 'unselected-pressed-state-layer-color'),
        'pressed-opacity':
          _token($theme, 'unselected-pressed-state-layer-opacity'),
        'shape': 50%,
      )
    );

    @include focus_ring_outward.theme(
      (
        'color': map.get($theme, 'focus-ring-color'),
        'offset': map.get($theme, 'focus-ring-offset'),
        'target-shape': 50%,
      )
    );
  }

  &-radio--touch {
    margin: 4px;
  }

  &-radio__background {
    display: inline-block;
    position: relative;
    box-sizing: border-box;
    width: $icon-size;
    height: $icon-size;
  }

  &-radio__background::before {
    $padding-offset: calc(-1 * ($size - $icon-size) / 2);

    border-radius: 50%;
    content: '';
    height: $size;
    left: $padding-offset;
    opacity: 0;
    pointer-events: none;
    position: absolute;
    top: $padding-offset;
    transform: scale(0, 0);
    transition: opacity 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1),
      transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    width: $size;
  }
  &-radio__native-control:focus + &-radio__background::before {
    opacity: 0.12;
    transform: scale(1);
    transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1),
      transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  }

  &-radio__outer-circle {
    border-radius: 50%;
    border-style: solid;
    border-width: 2px;
    box-sizing: border-box;
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    transition: border-color 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    width: 100%;
  }

  &-radio__inner-circle {
    border-radius: 50%;
    border-style: solid;
    border-width: 10px;
    box-sizing: border-box;
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    transform: scale(0, 0);
    transition: transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1),
      border-color 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    width: 100%;
  }

  &-radio__native-control {
    cursor: inherit;
    margin: 0;
    opacity: 0;
    padding: 0;
    position: absolute;
    z-index: 1;
  }

  &-radio__ripple {
    // Ensure ripple is behind the inner and outer circles
    z-index: -1;
  }

  &-radio__native-control:checked ~ &-radio__ripple {
    @include ripple.theme(
      (
        'hover-color': _token($theme, 'selected-hover-state-layer-color'),
        'hover-opacity': _token($theme, 'selected-hover-state-layer-opacity'),
        'pressed-color': _token($theme, 'selected-pressed-state-layer-color'),
        'pressed-opacity':
          _token($theme, 'selected-pressed-state-layer-opacity'),
      )
    );
  }

  // Transitions
  &-radio__native-control:is(:checked, :disabled) + &-radio__background {
    transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1),
      transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  }

  &-radio__native-control:is(:checked, :disabled)
    + &-radio__background
    &-radio__outer-circle {
    transition: border-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  }

  &-radio__native-control:checked + &-radio__background &-radio__inner-circle {
    transform: scale(0.5);
  }
  &-radio__native-control:is(:checked, :disabled)
    + &-radio__background
    &-radio__inner-circle {
    transition: transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1),
      border-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  }

  // Unselected icon color
  &-radio__native-control:enabled:not(:checked)
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'unselected-icon-color');
  }
  &-radio__native-control:enabled:not(:checked):hover
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'unselected-hover-icon-color');
  }
  &-radio__native-control:enabled:not(:checked):focus
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'unselected-focus-icon-color');
  }
  &-radio__native-control:enabled:not(:checked):active
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'unselected-pressed-icon-color');
  }

  // Selected icon color
  &-radio__native-control:enabled:checked
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'selected-icon-color');
  }
  &-radio__native-control:enabled + &-radio__background &-radio__inner-circle {
    border-color: _token($theme, 'selected-icon-color');
  }
  &-radio__native-control:enabled:checked:hover
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'selected-hover-icon-color');
  }
  &-radio__native-control:enabled:hover
    + &-radio__background
    &-radio__inner-circle {
    border-color: _token($theme, 'selected-hover-icon-color');
  }
  &-radio__native-control:enabled:checked:focus
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'selected-focus-icon-color');
  }
  &-radio__native-control:enabled:focus
    + &-radio__background
    &-radio__inner-circle {
    border-color: _token($theme, 'selected-focus-icon-color');
  }
  &-radio__native-control:enabled:checked:active
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'selected-pressed-icon-color');
  }
  &-radio__native-control:enabled:active
    + &-radio__background
    &-radio__inner-circle {
    border-color: _token($theme, 'selected-pressed-icon-color');
  }

  &-radio[hidden] {
    display: none;
  }

  &-radio--disabled {
    @include ripple.theme(
      (
        'hover-opacity': 0,
        'pressed-opacity': 0,
      )
    );
    cursor: default;
    pointer-events: none;
  }

  // Using the aria-disabled attribute selector for disabled list items.
  [aria-disabled='true'] &-radio__native-control + &-radio__background,
  &-radio__native-control:disabled + &-radio__background {
    cursor: default;
  }

  [aria-disabled='true']
    &-radio__native-control
    + &-radio__background
    &-radio__inner-circle,
  &-radio__native-control:disabled + &-radio__background &-radio__inner-circle {
    border-color: _token($theme, 'disabled-selected-icon-color');
    opacity: _token($theme, 'disabled-selected-icon-opacity');
  }

  [aria-disabled='true']
    &-radio__native-control:not(:checked)
    + &-radio__background
    &-radio__outer-circle,
  &-radio__native-control:disabled:not(:checked)
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'disabled-unselected-icon-color');
    opacity: _token($theme, 'disabled-unselected-icon-opacity');
  }

  [aria-disabled='true']
    &-radio__native-control:checked
    + &-radio__background
    &-radio__outer-circle,
  &-radio__native-control:disabled:checked
    + &-radio__background
    &-radio__outer-circle {
    border-color: _token($theme, 'disabled-selected-icon-color');
    opacity: _token($theme, 'disabled-selected-icon-opacity');
  }

  // Touch target
  &-radio--touch &-radio__native-control {
    $touch-target-size: 48px;
    $correction-to-center-touch-target-and-visible-radio-button: -4px;

    width: $touch-target-size;
    height: $touch-target-size;
    left: $correction-to-center-touch-target-and-visible-radio-button;
    top: $correction-to-center-touch-target-and-visible-radio-button;
  }

  // Focus ring
  &-radio__native-control:focus-visible ~ &-radio__focusring {
    @include focus_ring_outward.theme(
      (
        'display': block,
      )
    );
  }

  &-radio__background::before {
    background-color: transparent;
  }

  // High contrast mode
  @media screen and (forced-colors: active) {
    &-radio--disabled
      &-radio__native-control:is(
        :disabled,
        :disabled:checked,
        :disabled:not(:checked)
      )
      + &-radio__background
      :is(&-radio__inner-circle, &-radio__outer-circle) {
      border-color: GrayText;
      opacity: 1;
    }
  }

  // Form field overrides
  // TODO(b/246297033): Remove these hacks when GM3 Formfield is ready to use.
  &-radio__form-field {
    color: map.get($form-field-override-values, 'on-surface');
    font-family: Roboto, Arial, sans-serif;
    font-size: map.get($form-field-override-values, 'body-large-size');
    font-weight: 400;
    letter-spacing: 0.2px;
    line-height: 1.25rem;
  }

  &-radio--disabled ~ .mdc-label {
    color: map.get($form-field-override-values, 'on-surface-variant');
  }

  &-radio:not(&-radio--touch) ~ .mdc-label {
    padding-inline: 8px 0px;
  }
}
