/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

@use 'sass:list';
@use 'sass:map';
@use 'third_party/javascript/material/m3/sass/internal/theme';

/// The list of supported themeable tokens for this component.
$supported-tokens: (
  // go/keep-sorted start
  'active-indicator-color',
  'active-indicator-height',
  'track-color',
  'track-height',
  'track-shape',
  // go/keep-sorted end
);

/// Returns value in $map associated with $key. Throws an error for any $key
/// not present in $supported-tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @param {String} $key - The key in the map.
/// @return {Any} Returns the value from the map if it exists.
/// @throw Error if the $key is not included in the $supported-tokens list.
@function _token($map, $key) {
  @if not list.index($supported-tokens, $key) {
    @error 'Token "#{$key}" is not a supported token for component "linear_progress". Consider adding it to $supported-tokens.';
  }
  @return map.get($map, $key);
}

/// Returns a copy of the map only containing the supported tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @return {Map} Returns the map only with supported tokens.
@function pick($map) {
  $result: ();
  @each $key, $val in $map {
    @if list.index($supported-tokens, $key) {
      $result: map.set($result, $key, map.get($map, $key));
    }
  }
  @return $result;
}

/// Emits CSS custom properties for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to emit.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-theme($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "linear_progress" (see $supported-tokens).';
    }
  }

  @include theme.emit($theme);
}

/// Emits CSS selectors with property/value pairs for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see {theme.create}
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to use for CSS values.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-styles($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "linear_progress" (see $supported-tokens).';
    }
  }

  &-linear-progress__wrapper {
    position: relative;
  }

  &-linear-progress {
    position: relative;
    width: 100%;
    transform: translateZ(0);
    // Create a border around the bar in Windows High Contrast Mode.
    outline: 1px solid transparent;
    overflow-x: hidden;
    height: max(
      _token($theme, 'track-height'),
      _token($theme, 'active-indicator-height')
    );

    transition: opacity 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);

    @media screen and (forced-colors: active) {
      outline-color: CanvasText;
    }
  }

  &-linear-progress__bar {
    position: absolute;
    inset-block: 0;
    margin: auto 0; // Vertically center
    width: 100%;
    animation: none;
    transform-origin: top left;
    height: _token($theme, 'active-indicator-height');

    transition: transform 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  }

  &-linear-progress__bar-inner {
    display: inline-block;
    position: absolute;
    width: 100%;
    animation: none;
    // Border is used rather than background-color to ensure that the
    // bar is visible in Windows High Contrast Mode.
    border-block-start-style: solid;
    border-color: _token($theme, 'active-indicator-color');
    border-block-start-width: _token($theme, 'active-indicator-height');
  }

  &-linear-progress__buffer {
    display: flex;
    position: absolute;
    inset-block: 0;
    margin: auto 0; // Vertically center
    width: 100%;
    overflow: hidden;
    height: _token($theme, 'track-height');
    border-radius: _token($theme, 'track-shape');
  }

  &-linear-progress__buffer-dots {
    background-repeat: repeat-x;
    flex: auto;
    transform: rotate(180deg);
    background-color: _token($theme, 'track-color');
    // SVG is optimized for data URI (https://codepen.io/tigt/post/optimizing-svgs-in-data-uris)
    $svg: "data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='xMinYMin slice'%3E%3Ccircle cx='1' cy='1' r='1'/%3E%3C/svg%3E";
    -webkit-mask-image: url($svg);
    mask-image: url($svg);

    animation: mdc-linear-progress-buffering 250ms infinite linear;

    @media (forced-colors: active) {
      background-color: ButtonBorder;
    }

    @keyframes mdc-linear-progress-buffering {
      from {
        // Normally the buffer dots start from the left and overflow to the right.
        // We rotate by 180deg so that the buffer dots start on the right when
        // in non-reversed mode and overflow to the left.
        transform: rotate(180deg)
          translateX(calc(_token($theme, 'track-height') * -2.5));
      }
    }
  }

  &-linear-progress__buffer-bar {
    flex: 0 1 100%;
    background-color: _token($theme, 'track-color');

    transition: flex-basis 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  }

  &-linear-progress__primary-bar {
    transform: scaleX(0);
  }

  &-linear-progress__secondary-bar {
    display: none;
  }

  // Indeterminate

  &-linear-progress--indeterminate &-linear-progress__bar {
    transition: none;
  }

  &-linear-progress--indeterminate &-linear-progress__primary-bar {
    inset-inline-start: -145.166611%;
  }

  &-linear-progress--indeterminate &-linear-progress__secondary-bar {
    inset-inline-start: -54.888891%;
    display: block;
  }

  &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
    &-linear-progress__primary-bar {
    animation: mdc-linear-progress-primary-indeterminate-translate 2s infinite
      linear;

    @keyframes mdc-linear-progress-primary-indeterminate-translate {
      $sign: var(--flow-direction, 1);

      0% {
        transform: translateX(0);
      }

      20% {
        animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
        transform: translateX(0);
      }

      59.15% {
        animation-timing-function: cubic-bezier(
          0.302435,
          0.381352,
          0.55,
          0.956352
        );

        $primary-half: var(--mdc-linear-progress-primary-half, 83.67142%);
        /*rtl:ignore*/
        transform: translateX(calc($sign * $primary-half));
      }

      100% {
        $primary-full: var(--mdc-linear-progress-primary-full, 200.611057%);
        /*rtl:ignore*/
        transform: translateX(calc($sign * $primary-full));
      }
    }
  }

  &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
    &-linear-progress__primary-bar
    > &-linear-progress__bar-inner {
    animation: mdc-linear-progress-primary-indeterminate-scale 2s infinite
      linear;

    @keyframes mdc-linear-progress-primary-indeterminate-scale {
      0% {
        transform: scaleX(0.08);
      }

      36.65% {
        animation-timing-function: cubic-bezier(0.334731, 0.12482, 0.785844, 1);
        transform: scaleX(0.08);
      }

      69.15% {
        animation-timing-function: cubic-bezier(0.06, 0.11, 0.6, 1);
        transform: scaleX(0.661479);
      }

      100% {
        transform: scaleX(0.08);
      }
    }
  }

  &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
    &-linear-progress__secondary-bar {
    animation: mdc-linear-progress-secondary-indeterminate-translate 2s infinite
      linear;

    @keyframes mdc-linear-progress-secondary-indeterminate-translate {
      $sign: var(--flow-direction, 1);

      0% {
        animation-timing-function: cubic-bezier(0.15, 0, 0.515058, 0.409685);
        transform: translateX(0);
      }

      25% {
        animation-timing-function: cubic-bezier(
          0.31033,
          0.284058,
          0.8,
          0.733712
        );
        $secondary-quarter: var(
          --mdc-linear-progress-secondary-quarter,
          37.651913%
        );
        /*rtl:ignore*/
        transform: translateX(calc($sign * $secondary-quarter));
      }

      48.35% {
        animation-timing-function: cubic-bezier(0.4, 0.627035, 0.6, 0.902026);
        $secondary-half: var(--mdc-linear-progress-secondary-half, 84.386165%);
        /*rtl:ignore*/
        transform: translateX(calc($sign * $secondary-half));
      }

      100% {
        $secondary-full: var(--mdc-linear-progress-secondary-full, 160.277782%);
        /*rtl:ignore*/
        transform: translateX(calc($sign * $secondary-full));
      }
    }
  }

  &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
    &-linear-progress__secondary-bar
    > &-linear-progress__bar-inner {
    animation: mdc-linear-progress-secondary-indeterminate-scale 2s infinite
      linear;

    @keyframes mdc-linear-progress-secondary-indeterminate-scale {
      0% {
        animation-timing-function: cubic-bezier(
          0.205028,
          0.057051,
          0.57661,
          0.453971
        );
        transform: scaleX(0.08);
      }

      19.15% {
        animation-timing-function: cubic-bezier(
          0.152313,
          0.196432,
          0.648374,
          1.004315
        );
        transform: scaleX(0.457104);
      }

      44.15% {
        animation-timing-function: cubic-bezier(
          0.257759,
          -0.003163,
          0.211762,
          1.38179
        );
        transform: scaleX(0.72796);
      }

      100% {
        transform: scaleX(0.08);
      }
    }
  }

  // end Indeterminate

  @at-root {
    [dir='rtl'] &-linear-progress:not([dir='ltr']),
    &-linear-progress[dir='rtl']:not([dir='ltr']) {
      --flow-direction: -1;
    }
  }

  &-linear-progress--closed {
    opacity: 0;
  }
  &-linear-progress--closed-animation-off &-linear-progress__buffer-dots {
    animation: none;
  }
  &-linear-progress--closed-animation-off#{&}-linear-progress--indeterminate
    :is(
      &-linear-progress__bar,
      &-linear-progress__bar &-linear-progress__bar-inner
    ) {
    animation: none;
  }

  // TODO(b/155129310): Add styles for 4-color linear progress once this variant
  // is supported.
}
