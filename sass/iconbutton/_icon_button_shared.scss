/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

@use 'sass:list';
@use 'sass:map';
@use 'third_party/javascript/material/m3/sass/focusring/focus_ring_outward';
@use 'third_party/javascript/material/m3/sass/ripple/ripple';
@use 'third_party/javascript/material/m3/sass/internal/theme';

/// The list of supported themeable tokens for this component variant.
$supported-tokens: (
  // go/keep-sorted start
  'disabled-icon-color',
  'disabled-icon-opacity',
  'focus-ring-color',
  'focus-ring-offset',
  'icon-size',
  'touch-target-size',
  // go/keep-sorted end
);

/// Returns value in $map associated with $key. Throws an error for any $key
/// not present in $supported-tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @param {String} $key - The key in the map.
/// @return {Any} Returns the value from the map if it exists.
/// @throw Error if the $key is not included in the $supported-tokens list.
@function _token($map, $key) {
  @if not list.index($supported-tokens, $key) {
    @error 'Token "#{$key}" is not a supported token for component "icon_button_shared". Consider adding it to $supported-tokens.';
  }
  @return map.get($map, $key);
}

/// Returns a copy of the map only containing the supported tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @return {Map} Returns the map only with supported tokens.
@function pick($map) {
  $result: ();
  @each $key, $val in $map {
    @if list.index($supported-tokens, $key) {
      $result: map.set($result, $key, map.get($map, $key));
    }
  }
  @return $result;
}

/// Emits CSS custom properties for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to emit.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-theme($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "icon_button_shared" (see $supported-tokens).';
    }
  }

  @include theme.emit($theme);
}

/// Emits CSS selectors with property/value pairs for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see {theme.create}
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to use for CSS values.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-styles($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "icon_button_shared" (see $supported-tokens).';
    }
  }

  &-icon-button {
    align-items: center;
    appearance: none;
    background: transparent;
    border: none;
    box-sizing: border-box;
    cursor: pointer;
    display: inline-flex;
    fill: currentColor;
    justify-content: center;
    line-height: inherit;
    outline: none;
    position: relative;
    text-rendering: inherit;
    user-select: none;

    @include focus_ring_outward.theme(
      (
        'color': _token($theme, 'focus-ring-color'),
        'offset': _token($theme, 'focus-ring-offset'),
      )
    );
  }

  &-icon-button :is(i, svg, img) {
    block-size: _token($theme, 'icon-size');
    font-size: _token($theme, 'icon-size');
    inline-size: _token($theme, 'icon-size');
  }
  // Double specificity to override material-icons-extended line-height style
  &-icon-button__icon-slot#{&}-icon-button__icon-slot {
    block-size: _token($theme, 'icon-size');
    display: inline-block;
    inline-size: _token($theme, 'icon-size');
    line-height: 0;
    z-index: 1;
  }
  // Increase specificity to override material-icons-extended display style
  &-icon-button__icon-slot#{&}-icon-button__icon-slot--on {
    display: none;
  }
  &-icon-button--on &-icon-button__icon-slot {
    display: none;
  }
  &-icon-button--on &-icon-button__icon-slot--on {
    display: inline-block;
  }

  &-icon-button:focus-visible,
  &-icon-button &-icon-button__link:focus-visible ~ &-icon-button__focusring {
    @include focus_ring_outward.theme(
      (
        'display': block,
      )
    );
  }

  &-icon-button:disabled {
    @include ripple.theme(
      (
        'hover-opacity': 0,
        'pressed-opacity': 0,
      )
    );
    color: _token($theme, 'disabled-icon-color');
    cursor: default;
    opacity: _token($theme, 'disabled-icon-opacity');
    pointer-events: none;
  }
  &-icon-button--with-tooltip:disabled {
    pointer-events: auto;
  }

  &-icon-button[hidden] {
    display: none;
  }

  [dir='rtl'] &-icon-button--flip-icon-in-rtl,
  &-icon-button--flip-icon-in-rtl[dir='rtl'] {
    /*rtl:ignore*/
    transform: scaleX(-1);
  }

  &-icon-button__link {
    block-size: 100%;
    inline-size: 100%;
    left: 0;
    outline: none;
    position: absolute;
    top: 0;
  }

  &-icon-button__touch {
    block-size: _token($theme, 'touch-target-size');
    inline-size: _token($theme, 'touch-target-size');
    left: auto;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    // Needs to be above content to intercept clicks
    z-index: 1;
  }
}
