/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

@use 'sass:list';
@use 'sass:map';
@use '../internal/theme';

/// The list of supported themeable tokens for this component.
$supported-tokens: (
  // go/keep-sorted start
  'active-indicator-color',
  'active-indicator-height',
  'active-indicator-shape',
  'active-indicator-thickness',
  'active-indicator-track-space',
  'stop-indicator-color',
  'stop-indicator-shape',
  'stop-indicator-size',
  'track-color',
  'track-height',
  'track-shape',
  'track-thickness',
  // go/keep-sorted end
);

/// Returns value in $map associated with $key. Throws an error for any $key
/// not present in $supported-tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @param {String} $key - The key in the map.
/// @return {Any} Returns the value from the map if it exists.
/// @throw Error if the $key is not included in the $supported-tokens list.
@function _token($map, $key) {
  @if not list.index($supported-tokens, $key) {
    @error 'Token "#{$key}" is not a supported token for component "linear_progress". Consider adding it to $supported-tokens.';
  }
  @return map.get($map, $key);
}

/// Returns a copy of the map only containing the supported tokens.
/// @see $supported-tokens
/// @param {Map} $map - The input map.
/// @return {Map} Returns the map only with supported tokens.
@function pick-supported-tokens($map) {
  $result: ();
  @each $key, $val in $map {
    @if list.index($supported-tokens, $key) {
      $result: map.set($result, $key, map.get($map, $key));
    }
  }
  @return $result;
}

/// Adds token values that Linear Progress theme API supports, but is not
/// reflected in Carbon. We do this in order to maintain a consistent API across
/// token versions.
// TODO(b/326483536): Remove this function once updated tokens are generated.
/// @param {Map} $map - A map of token names to values.
/// @param {Map} $sys-color - System color palette.
/// @param {Map} $sys-shape - System shape tokens.
/// @return {Map} Returns the map with additional tokens.
@function add-tokens-outside-carbon($map, $sys-color, $sys-shape) {
  @return map.merge(
    $map,
    (
      'active-indicator-shape': map.get($sys-shape, 'corner-full'),
      'active-indicator-thickness': 4px,
      'active-indicator-track-space': 4px,
      'stop-indicator-color': map.get($sys-color, 'primary'),
      'stop-indicator-shape': 4px,
      'stop-indicator-size': 4px,
      'track-color': map.get($sys-color, 'primary-container'),
      'track-thickness': 4px,
      'track-shape': map.get($sys-shape, 'corner-full'),
    )
  );
}

/// Emits CSS custom properties for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to emit.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-theme($theme) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "linear_progress" (see $supported-tokens).';
    }
  }

  @include theme.emit($theme);
}

/// Emits CSS selectors with property/value pairs for the given input map.
/// Be sure to call theme.create on a theme map before passing it as input.
/// @see {theme.create}
/// @see $supported-tokens
/// @param {Map} $theme - The theme map to use for CSS values.
/// @throw Error if any keys in $theme are not included in $supported-tokens.
@mixin abstract-styles($theme, $useNTCStyles: false) {
  @each $key, $val in $theme {
    @if not list.index($supported-tokens, $key) {
      @error 'Token "#{$key}" is not a supported token for component "linear_progress" (see $supported-tokens).';
    }
  }

  @if $useNTCStyles {
    &-linear-progress__wrapper {
      position: relative;
    }

    &-linear-progress {
      display: flex;
      flex-direction: row;
      align-items: flex-start;
      position: relative;
      width: 100%;
      transform: translateZ(0);
      overflow-x: hidden;
      height: max(
        _token($theme, 'track-thickness'),
        _token($theme, 'active-indicator-thickness')
      );

      transition: opacity 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    }

    &-linear-progress__bar {
      /*rtl:ignore*/
      transform-origin: top left;
    }
    [dir='rtl'] &-linear-progress__bar:not([dir='ltr']),
    &-linear-progress__bar[dir='rtl']:not([dir='ltr']) {
      /*rtl:ignore*/
      transform-origin: center right;
    }

    &-linear-progress__active-indicator,
    &-linear-progress__track {
      width: 0;
      position: relative;
      margin: auto 0; // Vertically center
      animation: none;
      /*rtl:ignore*/
      transform-origin: top left;
      transition: min-width 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
      // Border is used rather than background-color to ensure that the
      // bar is visible in Windows High Contrast Mode.
      border-block-start-style: solid;
      inset-block: 0;
    }

    &-linear-progress__active-indicator {
      display: inline-block;
      // Border is used rather than background-color to ensure that the
      // bar is visible in Windows High Contrast Mode.
      border-color: _token($theme, 'active-indicator-color');
      border-block-start-width: _token($theme, 'active-indicator-thickness');
      border-radius: _token($theme, 'active-indicator-shape');
    }

    &-linear-progress__track {
      flex-grow: 1;
      overflow-x: hidden;
      // Border is used rather than background-color to ensure that the
      // bar is visible in Windows High Contrast Mode.
      border-color: _token($theme, 'track-color');
      border-block-start-width: _token($theme, 'track-thickness');
      border-radius: _token($theme, 'track-shape');

      @media screen and (forced-colors: active) {
        height: _token($theme, 'track-thickness');
        box-sizing: border-box;
        border: 1px solid CanvasText;
      }
    }

    &-linear-progress__gap-left,
    &-linear-progress__gap-right {
      position: relative;
      max-width: _token($theme, 'active-indicator-track-space');
      animation: none;
      height: _token($theme, 'active-indicator-track-space');
    }

    &-linear-progress__gap-right {
      width: _token($theme, 'active-indicator-track-space');
      flex-shrink: 0;
    }

    &-linear-progress__track-left,
    &-linear-progress__track-right {
      border-block-start-style: solid;
      border-color: _token($theme, 'track-color');
      border-block-start-width: _token($theme, 'track-thickness');
      border-radius: _token($theme, 'track-shape');

      @media screen and (forced-colors: active) {
        height: _token($theme, 'track-thickness');
        box-sizing: border-box;
        border: 1px solid CanvasText;
      }
    }

    &-linear-progress__track-right {
      flex-shrink: 0;
    }

    &-linear-progress__stop-indicator {
      position: absolute;
      border-radius: _token($theme, 'stop-indicator-shape');
      inset-block: 0;
      width: _token($theme, 'stop-indicator-size');
      inset-inline-end: 0;
      animation: none;
      height: _token($theme, 'stop-indicator-size');
      background-color: _token($theme, 'stop-indicator-color');
      @media screen and (forced-colors: active) {
        background-color: CanvasText;
      }
    }

    &-linear-progress__buffer-bar {
      display: flex;
      position: relative;
      inset-block: 0;
      margin: auto 0; // Vertically center
      width: 0;
      overflow: hidden;
      height: _token($theme, 'track-thickness');
      transition: width 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
      border-radius: _token($theme, 'track-shape');
    }

    &-linear-progress__buffer-dots {
      $sign: var(--flow-direction, 1);
      background-repeat: repeat-x;
      flex: auto;
      transform: rotate(calc(180deg * $sign));
      background-color: _token($theme, 'active-indicator-color');
      // SVG is optimized for data URI (https://codepen.io/tigt/post/optimizing-svgs-in-data-uris)
      $svg: "data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='xMinYMin slice'%3E%3Ccircle cx='1' cy='1' r='1'/%3E%3C/svg%3E";
      -webkit-mask-image: url($svg);
      mask-image: url($svg);

      // A negative margin-inline-start is used to prevent animated buffer dots
      // from disappearing abruptly or being clipped. This does not affect
      // external elements. A multiplier value of -5 was chosen by observing the
      // effect of different values on buffer dot clipping.
      margin-inline-start: calc(
        -5 * _token($theme, 'active-indicator-track-space')
      );

      animation: gm3-linear-progress-buffering-ntc 250ms infinite linear;

      @media (forced-colors: active) {
        background-color: ButtonBorder;
      }

      @keyframes gm3-linear-progress-buffering-ntc {
        from {
          // Normally the buffer dots start from the left and overflow to the right.
          // We rotate by 180deg so that the buffer dots start on the right when
          // in non-reversed mode and overflow to the left.
          transform: rotate(calc(180deg * $sign))
            translateX(calc(_token($theme, 'track-thickness') * -2.5 * $sign));
        }
      }
    }

    // Indeterminate

    &-linear-progress--indeterminate &-linear-progress__active-indicator {
      flex-grow: 1;
      flex-shrink: 1;
      width: 0;
    }

    &-linear-progress--indeterminate &-linear-progress__track-left {
      flex-shrink: 0;
      width: 0;
    }

    &-linear-progress--indeterminate &-linear-progress__track-right {
      flex-shrink: 0;
      width: 100%;
    }

    &-linear-progress--indeterminate &-linear-progress__gap-left {
      width: _token($theme, 'active-indicator-track-space');
    }

    &-linear-progress--indeterminate &-linear-progress__gap-right {
      width: _token($theme, 'active-indicator-track-space');
      flex-shrink: 1;
    }

    &-linear-progress--indeterminate &-linear-progress__stop-indicator {
      display: none;
    }

    &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
      &-linear-progress__track-left {
      animation: 1.3s
        linear
        infinite
        gm3-linear-progress-indeterminate-track-left;
      animation-timing-function: cubic-bezier(0.3, 0, 0.8, 0.15);

      @keyframes gm3-linear-progress-indeterminate-track-left {
        0% {
          width: 0;
        }

        18% {
          width: 0;
        }

        61.5384615% {
          width: calc(50% - _token($theme, 'active-indicator-track-space'));
          animation-timing-function: cubic-bezier(0.05, 0.7, 0.1, 1);
        }

        100% {
          width: 100%;
        }
      }

      @media screen and (forced-colors: active) {
        animation: 1.3s linear infinite
          gm3-linear-progress-indeterminate-track-left-high-contrast;
        animation-timing-function: cubic-bezier(0.3, 0, 0.8, 0.15);

        @keyframes gm3-linear-progress-indeterminate-track-left-high-contrast {
          0% {
            width: 0;
            border-width: 0;
          }

          18% {
            width: 0;
            border-width: 0;
          }

          20% {
            border-width: 1px;
          }

          61.5384615% {
            border-width: 1px;
            width: calc(50% - _token($theme, 'active-indicator-track-space'));
            animation-timing-function: cubic-bezier(0.05, 0.7, 0.1, 1);
          }

          100% {
            width: 100%;
            border-width: 1px;
          }
        }
      }
    }

    &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
      &-linear-progress__track-right {
      animation: 1.3s
        linear
        infinite
        gm3-linear-progress-indeterminate-track-right;
      animation-timing-function: cubic-bezier(0.3, 0, 0.8, 0.15);

      @keyframes gm3-linear-progress-indeterminate-track-right {
        0% {
          width: 100%;
        }

        61.5384615% {
          width: 0;
        }

        100% {
          width: 0;
        }
      }

      @media screen and (forced-colors: active) {
        animation: 1.3s linear infinite
          gm3-linear-progress-indeterminate-track-right-high-contrast;
        animation-timing-function: cubic-bezier(0.3, 0, 0.8, 0.15);

        @keyframes gm3-linear-progress-indeterminate-track-right-high-contrast {
          0% {
            width: 100%;
            border-width: 1px;
          }

          61.4% {
            border-width: 1px;
          }

          61.5384615% {
            width: 0;
            border-width: 0;
          }

          100% {
            border-width: 0;
            width: 0;
          }
        }
      }
    }

    &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
      &-linear-progress__gap-left {
      animation: 1.3s
        linear
        infinite
        gm3-linear-progress-indeterminate-gap-left;

      @keyframes gm3-linear-progress-indeterminate-gap-left {
        0% {
          width: 0;
        }

        9.8% {
          width: 0;
        }

        20% {
          width: _token($theme, 'active-indicator-track-space');
        }

        100% {
          width: _token($theme, 'active-indicator-track-space');
        }
      }
    }

    &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
      &-linear-progress__gap-right {
      animation: 1.3s
        linear
        infinite
        gm3-linear-progress-indeterminate-gap-right;

      @keyframes gm3-linear-progress-indeterminate-gap-right {
        61.5384615% {
          width: _token($theme, 'active-indicator-track-space');
        }
        61.6384615% {
          width: 0;
        }
        100% {
          width: 0;
        }
      }
    }

    // end Indeterminate

    @at-root {
      [dir='rtl'] &-linear-progress:not([dir='ltr']),
      &-linear-progress[dir='rtl']:not([dir='ltr']) {
        --flow-direction: -1;
      }
    }

    &-linear-progress--closed {
      opacity: 0;
    }
    &-linear-progress--closed-animation-off &-linear-progress__buffer-dots {
      animation: none;
    }
    &-linear-progress--closed-animation-off#{&}-linear-progress--indeterminate
      &-linear-progress__bar {
      animation: none;
    }
  } @else {
    &-linear-progress__wrapper {
      position: relative;
    }

    &-linear-progress {
      position: relative;
      width: 100%;
      transform: translateZ(0);
      // Create a border around the bar in Windows High Contrast Mode.
      outline: 1px solid transparent;
      overflow-x: hidden;
      height: max(
        _token($theme, 'track-height'),
        _token($theme, 'active-indicator-height')
      );

      transition: opacity 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);

      @media screen and (forced-colors: active) {
        outline-color: CanvasText;
      }
    }

    &-linear-progress__bar {
      position: absolute;
      inset-block: 0;
      margin: auto 0; // Vertically center
      width: 100%;
      animation: none;
      /*rtl:ignore*/
      transform-origin: top left;
      height: _token($theme, 'active-indicator-height');

      transition: transform 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    }
    [dir='rtl'] &-linear-progress__bar:not([dir='ltr']),
    &-linear-progress__bar[dir='rtl']:not([dir='ltr']) {
      /*rtl:ignore*/
      transform-origin: center right;
    }

    &-linear-progress__bar-inner {
      display: inline-block;
      position: absolute;
      width: 100%;
      animation: none;
      // Border is used rather than background-color to ensure that the
      // bar is visible in Windows High Contrast Mode.
      border-block-start-style: solid;
      border-color: _token($theme, 'active-indicator-color');
      border-block-start-width: _token($theme, 'active-indicator-height');
    }

    &-linear-progress__buffer {
      display: flex;
      position: absolute;
      inset-block: 0;
      margin: auto 0; // Vertically center
      width: 100%;
      overflow: hidden;
      height: _token($theme, 'track-height');
      border-radius: _token($theme, 'track-shape');
    }

    &-linear-progress__buffer-dots {
      $sign: var(--flow-direction, 1);
      background-repeat: repeat-x;
      flex: auto;
      transform: rotate(calc(180deg * $sign));
      background-color: _token($theme, 'track-color');
      // SVG is optimized for data URI (https://codepen.io/tigt/post/optimizing-svgs-in-data-uris)
      $svg: "data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='xMinYMin slice'%3E%3Ccircle cx='1' cy='1' r='1'/%3E%3C/svg%3E";
      -webkit-mask-image: url($svg);
      mask-image: url($svg);

      animation: gm3-linear-progress-buffering 250ms infinite linear;

      @media (forced-colors: active) {
        background-color: ButtonBorder;
      }

      @keyframes gm3-linear-progress-buffering {
        from {
          // Normally the buffer dots start from the left and overflow to the right.
          // We rotate by 180deg so that the buffer dots start on the right when
          // in non-reversed mode and overflow to the left.
          transform: rotate(calc(180deg * $sign))
            translateX(calc(_token($theme, 'track-height') * -2.5 * $sign));
        }
      }
    }

    &-linear-progress__buffer-bar {
      flex: 0 1 100%;
      background-color: _token($theme, 'track-color');

      transition: flex-basis 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    }

    &-linear-progress__primary-bar {
      transform: scaleX(0);
    }

    &-linear-progress__secondary-bar {
      display: none;
    }

    // Indeterminate

    &-linear-progress--indeterminate &-linear-progress__bar {
      transition: none;
    }

    &-linear-progress--indeterminate &-linear-progress__primary-bar {
      inset-inline-start: -145.166611%;
    }

    &-linear-progress--indeterminate &-linear-progress__secondary-bar {
      inset-inline-start: -54.888891%;
      display: block;
    }

    &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
      &-linear-progress__primary-bar {
      animation: gm3-linear-progress-primary-indeterminate-translate
        2s
        infinite
        linear;

      @keyframes gm3-linear-progress-primary-indeterminate-translate {
        $sign: var(--flow-direction, 1);

        0% {
          transform: translateX(0);
        }

        20% {
          animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
          transform: translateX(0);
        }

        59.15% {
          animation-timing-function: cubic-bezier(
            0.302435,
            0.381352,
            0.55,
            0.956352
          );

          $primary-half: var(--mdc-linear-progress-primary-half, 83.67142%);
          /*rtl:ignore*/
          transform: translateX(calc($sign * $primary-half));
        }

        100% {
          $primary-full: var(--mdc-linear-progress-primary-full, 200.611057%);
          /*rtl:ignore*/
          transform: translateX(calc($sign * $primary-full));
        }
      }
    }

    &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
      &-linear-progress__primary-bar
      > &-linear-progress__bar-inner {
      animation: gm3-linear-progress-primary-indeterminate-scale
        2s
        infinite
        linear;

      @keyframes gm3-linear-progress-primary-indeterminate-scale {
        0% {
          transform: scaleX(0.08);
        }

        36.65% {
          animation-timing-function: cubic-bezier(
            0.334731,
            0.12482,
            0.785844,
            1
          );
          transform: scaleX(0.08);
        }

        69.15% {
          animation-timing-function: cubic-bezier(0.06, 0.11, 0.6, 1);
          transform: scaleX(0.661479);
        }

        100% {
          transform: scaleX(0.08);
        }
      }
    }

    &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
      &-linear-progress__secondary-bar {
      animation: gm3-linear-progress-secondary-indeterminate-translate
        2s
        infinite
        linear;

      @keyframes gm3-linear-progress-secondary-indeterminate-translate {
        $sign: var(--flow-direction, 1);

        0% {
          animation-timing-function: cubic-bezier(0.15, 0, 0.515058, 0.409685);
          transform: translateX(0);
        }

        25% {
          animation-timing-function: cubic-bezier(
            0.31033,
            0.284058,
            0.8,
            0.733712
          );
          $secondary-quarter: var(
            --mdc-linear-progress-secondary-quarter,
            37.651913%
          );
          /*rtl:ignore*/
          transform: translateX(calc($sign * $secondary-quarter));
        }

        48.35% {
          animation-timing-function: cubic-bezier(0.4, 0.627035, 0.6, 0.902026);
          $secondary-half: var(
            --mdc-linear-progress-secondary-half,
            84.386165%
          );
          /*rtl:ignore*/
          transform: translateX(calc($sign * $secondary-half));
        }

        100% {
          $secondary-full: var(
            --mdc-linear-progress-secondary-full,
            160.277782%
          );
          /*rtl:ignore*/
          transform: translateX(calc($sign * $secondary-full));
        }
      }
    }

    &-linear-progress--indeterminate#{&}-linear-progress--animation-ready
      &-linear-progress__secondary-bar
      > &-linear-progress__bar-inner {
      animation: gm3-linear-progress-secondary-indeterminate-scale
        2s
        infinite
        linear;

      @keyframes gm3-linear-progress-secondary-indeterminate-scale {
        0% {
          animation-timing-function: cubic-bezier(
            0.205028,
            0.057051,
            0.57661,
            0.453971
          );
          transform: scaleX(0.08);
        }

        19.15% {
          animation-timing-function: cubic-bezier(
            0.152313,
            0.196432,
            0.648374,
            1.004315
          );
          transform: scaleX(0.457104);
        }

        44.15% {
          animation-timing-function: cubic-bezier(
            0.257759,
            -0.003163,
            0.211762,
            1.38179
          );
          transform: scaleX(0.72796);
        }

        100% {
          transform: scaleX(0.08);
        }
      }
    }

    // end Indeterminate

    @at-root {
      [dir='rtl'] &-linear-progress:not([dir='ltr']),
      &-linear-progress[dir='rtl']:not([dir='ltr']) {
        --flow-direction: -1;
      }
    }

    &-linear-progress--closed {
      opacity: 0;
    }
    &-linear-progress--closed-animation-off &-linear-progress__buffer-dots {
      animation: none;
    }
    &-linear-progress--closed-animation-off#{&}-linear-progress--indeterminate
      :is(
        &-linear-progress__bar,
        &-linear-progress__bar &-linear-progress__bar-inner
      ) {
      animation: none;
    }

    // TODO(b/155129310): Add styles for 4-color linear progress once this variant
    // is supported.
  }
}
